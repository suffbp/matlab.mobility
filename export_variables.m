% Define the file path for the CSV file
csvFilePath = '/Users/bsuffoletto/Desktop/Accel/UPMC/predictors/predictors.csv';

% Check if the file already exists
fileExists = isfile(csvFilePath);

% Open the CSV file
if ~fileExists
    % If the file does not exist, create it and open in write mode
    fileID = fopen(csvFilePath, 'w');
else
    % If the file exists, open it in append mode
    fileID = fopen(csvFilePath, 'a');
end

% Define the header and data to write
header = {'File Identifier', 'mean_step_time_in_seconds', 'mean_left_stride_time_in_seconds', ...
    'mean_right_stride_time_in_seconds', 'mean_combined_stride_time_in_seconds', ...
    'left_stride_time_std', 'right_stride_time_std', 'combined_stride_time_std', ...
    'mean_left_stance_time_in_seconds', 'mean_right_stance_time_in_seconds', ...
    'mean_combined_stance_time_in_seconds', 'left_stance_time_std', ...
    'right_stance_time_std', 'combined_stance_time_std', ...
    'mean_left_swing_time_in_seconds', 'left_swing_time_std', ...
    'right_swing_time_std', 'combined_swing_time_std', ...
    'mean_right_swing_time_in_seconds', 'mean_combined_swing_time_in_seconds', ...
    'mean_double_support_time_in_seconds', 'std_double_support_time_in_seconds', ...
    'stride_time_asymmetry', 'swing_time_asymmetry', 'stance_time_asymmetry', ...
    'LyE', 'HRatio_AP', 'HRatio_ML', 'HRatio_Vert', 'CI', ...
    'stand_MA', 'turn_MA', 'sit_MA', 'stand_MV', 'turn_MV', 'sit_MV', ...
    'stand_MP', 'turn_MP', 'sit_MP', 'stand_time_to_complete', ...
    'turn_time_to_complete', 'sit_time_to_complete'};

% Example data (replace these with your actual calculated variables)
% Round each numeric value to 5 decimal places
data = {file_identifier, round(mean_step_time_in_seconds, 5), round(mean_left_stride_time_in_seconds, 5), ...
    round(mean_right_stride_time_in_seconds, 5), round(mean_combined_stride_time_in_seconds, 5), ...
    round(left_stride_time_std, 5), round(right_stride_time_std, 5), round(combined_stride_time_std, 5), ...
    round(mean_left_stance_time_in_seconds, 5), round(mean_right_stance_time_in_seconds, 5), ...
    round(mean_combined_stance_time_in_seconds, 5), round(left_stance_time_std, 5), ...
    round(right_stance_time_std, 5), round(combined_stance_time_std, 5), ...
    round(mean_left_swing_time_in_seconds, 5), round(left_swing_time_std, 5), ...
    round(right_swing_time_std, 5), round(combined_swing_time_std, 5), ...
    round(mean_right_swing_time_in_seconds, 5), round(mean_combined_swing_time_in_seconds, 5), ...
    round(mean_double_support_time_in_seconds, 5), round(std_double_support_time_in_seconds, 5), ...
    round(stride_time_asymmetry, 5), round(swing_time_asymmetry, 5), round(stance_time_asymmetry, 5), ...
    round(LyE, 5), round(HRatio_AP, 5), round(HRatio_ML, 5), round(HRatio_Vert, 5), round(CI, 5), ...
    round(stand_MA, 5), round(turn_MA, 5), round(sit_MA, 5), ...
    round(stand_MV, 5), round(turn_MV, 5), round(sit_MV, 5), ...
    round(stand_MP, 5), round(turn_MP, 5), round(sit_MP, 5), ...
    round(stand_time_to_complete, 5), round(turn_time_to_complete, 5), round(sit_time_to_complete, 5)};

% Write the header if the file is being created for the first time
if ~fileExists
    fprintf(fileID, '%s,', header{:});
    fprintf(fileID, '\n');
end

% Write the data row with fixed-point formatting (%.5f)
fprintf(fileID, '%s,', data{1}); % Write file identifier as a string
for i = 2:length(data)
    fprintf(fileID, '%.5f,', data{i}); % Write each numeric value as a fixed-point number
end
fprintf(fileID, '\n');

% Close the file
fclose(fileID);
